name: Generate tool-config images

env:
  GITHUB_OUTPUT: ""

on:
  workflow_call:

jobs:
  tool-config:
    name: tool-config
    strategy:
      matrix:
        protocol: ["http", "https"]
        runner: [ubuntu-latest, arm-runner-1]
        include:
        - runner: ubuntu-latest
          platform: "linux/amd64"
          platform_short: "amd64"
        - runner: arm-runner-1
          platform: "linux/arm64"
          platform_short: "arm64"
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      # Todo: delete the `-temp` from the name of the image, I did that to prevent polluting the official image for now.
      - name: Preparation
        id: prep
        run: |
          IMAGE="${{ matrix.protocol }}-tool-config-temp"
          TAG="${{ github.sha }}-${{ matrix.platform_short }}"
          FQIMAGE="ghcr.io/${{ github.repository_owner }}/${IMAGE}:${TAG}"
          echo "image=${IMAGE,,}" >> $GITHUB_OUTPUT
          echo "fqImage=${FQIMAGE,,}" >> $GITHUB_OUTPUT

      - name: ${{ matrix.platform_short }} build - ${{ steps.prep.outputs.fqImage }}
        run: true

      - name: Install docker
        if: matrix.runner == 'arm-runner-1'
        run: |
          sudo apt-get update
          sudo apt-get install -yq ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          
          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update

          # Install
          sudo apt-get install -yq docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

          # Give current user permission to run docker without sudo
          sudo usermod -aG docker $USER
          sudo apt-get install -yq acl
          sudo setfacl --modify user:$USER:rw /var/run/docker.sock

      - name: Config docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login in to registry
        # if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Publish Image
        # if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: docker/tool-config.Dockerfile
          build-args: |
            protocol=${{ matrix.protocol }}
          tags: ${{ steps.prep.outputs.fqImage }}
          platforms: ${{ matrix.platform }}
          provenance: false
          outputs: |
            type=image
            annotation-index.org.opencontainers.image.description=Config files for admin dashboard tools connecting to psinode over ${{ matrix.protocol }}

      - name: (PR Only) - Build image archive
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/tool-config.Dockerfile
          build-args: |
            protocol=${{ matrix.protocol }}
          tags: ${{ steps.prep.outputs.fqImage }}
          platforms: ${{ matrix.platform }}
          outputs: type=docker,dest=${{ steps.prep.outputs.image }}-${{ matrix.platform_short }}-image.tar

      - name: (PR only) - Upload image archive as artifact
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prep.outputs.image }}-${{ matrix.platform_short }}-image
          path: ${{ steps.prep.outputs.image }}-${{ matrix.platform_short }}-image.tar
          retention-days: 1
  merge: 
    name: merge multi-platform images
    # if: ${{ github.event_name != 'pull_request' }}
    strategy:
      matrix:
        protocol: ["http", "https"]
    runs-on: ubuntu-latest
    needs: tool-config
    steps:
      - name: Config docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login in to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/${{ matrix.protocol }}-tool-config-temp:${{ github.sha }}"
          docker manifest create ${IMAGE} \
            --amend ${IMAGE}-arm64 \
            --amend ${IMAGE}-amd64
          docker manifest push ${IMAGE}