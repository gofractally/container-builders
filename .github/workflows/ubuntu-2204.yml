name: Generate ubuntu-2204 images

env:
  GITHUB_OUTPUT: ""

on:
  push:
    branches:
      - main
    paths:
      - "docker/ubuntu-2204-builder.Dockerfile"
      - ".github/workflows/ubuntu-2204.yml"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "docker/ubuntu-2204-builder.Dockerfile"
      - ".github/workflows/ubuntu-2204.yml"
  workflow_run:
    workflows: ["Generate tool-config images"]
    types: [completed]
    branches:
      - 'main'

jobs:
  ubuntu-2204-builder:
    name: psibase-builder-ubuntu-2204
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: false
          fetch-depth: 0

      - name: Preparation
        id: prep
        run: |
          OWNER="${{ github.repository_owner }}"
          IMAGE="psibase-builder-ubuntu-2204"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            REGISTRY="localhost:5000"
            TAG="latest"
          else
            REGISTRY="ghcr.io"
            TAG="${{ github.sha }}"
          fi
          TAGS="${REGISTRY}/${OWNER}/${IMAGE}:${TAG}"
          echo "tags=${TAGS,,}" >> $GITHUB_OUTPUT

      - name: Showtag
        id: showtag
        run: echo ${{ steps.prep.outputs.tags }}

      - name: (PR only) - Config docker buildx network
        if: github.event_name == 'pull_request'
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
          driver-opts: network=host

      - name: Login in to registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Publish Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: docker/ubuntu-2204-builder.Dockerfile
          tags: ${{ steps.prep.outputs.tags }}
          platforms: linux/amd64
          outputs: type=image,annotation-index.org.opencontainers.image.description=Psibase build environment based on Ubuntu 22.04 (amd64)

      - name: (PR only) - Save docker image to archive
        if: github.event_name == 'pull_request'
        run: |
          docker pull ${{ steps.prep.outputs.tags }}
          docker save ${{ steps.prep.outputs.tags }} -o contributor-base-image.tar

      - name: (PR only) - Upload docker image archive
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: contributor-base-image
          path: contributor-base-image.tar

  psibase-contributor:
    name: psibase-contributor
    runs-on: ubuntu-latest
    needs: ubuntu-2204-builder
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: false
          fetch-depth: 0

      - name: Free up runner space
        run: |
          echo "=============================================================================="
          echo "Freeing up disk space on CI system"
          echo "=============================================================================="

          echo "Listing 100 largest packages"
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          df -h
          echo "Removing large packages"
          sudo apt-get remove -y '^ghc-8.*'
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y '^llvm-.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel
          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h
          echo "Removing large directories"
          rm -rf /usr/share/dotnet/
          df -h

      - name: Preparation
        id: prep
        run: |
          OWNER="${{ github.repository_owner }}"
          IMAGE="psibase-contributor"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            REGISTRY="localhost:5000"
            TAG="latest"
          else
            REGISTRY="ghcr.io"
            TAG="${{ github.sha }}"
          fi
          TAGS="${REGISTRY}/${OWNER}/${IMAGE}:${TAG}"
          echo "tags=${TAGS,,}" >> $GITHUB_OUTPUT

      - name: Showtag
        id: showtag
        run: echo ${{ steps.prep.outputs.tags }}

      - name: (PR only) - Config docker buildx network
        if: github.event_name == 'pull_request'
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug
          driver-opts: network=host

      - name: Login in to registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: (PR only) - Download contributor base image from artifact
        if: github.event_name == 'pull_request'
        uses: actions/download-artifact@v4
        with:
          name: contributor-base-image

      - name: (PR only) - Install downloaded image to docker
        if: github.event_name == 'pull_request'
        run: |
          docker load -i contributor-base-image.tar
          echo "Local docker images:"
          docker images
      
      - name: (PR only) - Push image to local registry
        run: |
          docker push localhost:5000/gofractally/psibase-builder-ubuntu-2204:latest

      - name: Set BASE_IMAGE
        id: base_image
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "BASE_IMAGE=localhost:5000/gofractally/psibase-builder-ubuntu-2204:latest" >> $GITHUB_OUTPUT
          else
            echo "BASE_IMAGE=ghcr.io/gofractally/psibase-builder-ubuntu-2204:${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build & Publish Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            BASE_IMAGE=${{ steps.base_image.outputs.BASE_IMAGE }}
          file: docker/psibase-contributor.Dockerfile
          tags: ${{ steps.prep.outputs.tags }}
          platforms: linux/amd64
          outputs: type=image,annotation-index.org.opencontainers.image.description=Psibase development environment

#      - name: (PR only) - Save docker image to archive
#        if: github.event_name == 'pull_request'
#        run: |
#          docker pull ${{ steps.prep.outputs.tags }}
#          docker save ${{ steps.prep.outputs.tags }} -o pr-psibase_contributor.tar

      # - name: (PR only) - Upload docker image archive as artifact
      #   if: github.event_name == 'pull_request'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: pr-psibase_contributor
      #     path: pr-psibase_contributor.tar